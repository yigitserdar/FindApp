{"version":3,"sources":["Query.js","App.js","serviceWorker.js","index.js"],"names":["Query","props","newSearcher","event","setState","searchInput","target","value","listView","state","i","elements","length","style","display","btns","addEventListener","current","document","getElementsByClassName","className","replace","this","gridView","onChange","type","placeholder","name","id","onClick","getVenues","bind","class","Component","App","getLocation","navigator","geolocation","getCurrentPosition","response","latlong","coords","latitude","longitude","console","log","query","params","client_id","client_secret","ll","v","limit","sortByDistance","trackPromise","Axios","get","URLSearchParams","then","showInitialMessage","venues","data","groups","items","text","locationCheck","map","venue","key","location","address","distance","Boolean","window","hostname","match","LoadingIndicator","usePromiseTracker","promiseInProgress","color","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce323f6a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nclass Query extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      searchInput: \"\",\r\n      elements: document.getElementsByClassName(\"list\"),\r\n      i: \"\",\r\n      btns: document.getElementsByClassName(\"btn\"),\r\n    };\r\n  }\r\n\r\n  newSearcher = (event) => {\r\n    this.setState({ searchInput: event.target.value });\r\n  };\r\n\r\n  listView = () => {\r\n    for (\r\n      this.state.i = 0;\r\n      this.state.i < this.state.elements.length;\r\n      this.state.i++\r\n    ) {\r\n      this.state.elements[this.state.i].style.display = \"block\";\r\n    }\r\n    for (\r\n      this.state.i = 0;\r\n      this.state.i < this.state.btns.length;\r\n      this.state.i++\r\n    ) {\r\n      this.state.btns[this.state.i].addEventListener(\"click\", function () {\r\n        var current = document.getElementsByClassName(\"active\");\r\n        current[0].className = current[0].className.replace(\" active\", \"\");\r\n        this.className += \" active\";\r\n      });\r\n    }\r\n  };\r\n\r\n  gridView = () => {\r\n    for (\r\n      this.state.i = 0;\r\n      this.state.i < this.state.elements.length;\r\n      this.state.i++\r\n    ) {\r\n      this.state.elements[this.state.i].style.display = \"grid\";\r\n    }\r\n    for (\r\n      this.state.i = 0;\r\n      this.state.i < this.state.btns.length;\r\n      this.state.i++\r\n    ) {\r\n      this.state.btns[this.state.i].addEventListener(\"click\", function () {\r\n        var current = document.getElementsByClassName(\"active\");\r\n        current[0].className = current[0].className.replace(\" active\", \"\");\r\n        this.className += \" active\";\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <input\r\n          className=\"input\"\r\n          onChange={this.newSearcher}\r\n          type=\"text\"\r\n          placeholder=\"Exp: pub\"\r\n          name=\"searchInput\"\r\n          id=\"searchInput\"\r\n        />\r\n        <div className=\"button-div\">\r\n          <button\r\n            className=\"button\"\r\n            onClick={this.props.getVenues.bind(null, this.state.searchInput)}\r\n          >\r\n            Search\r\n          </button>\r\n          <div id=\"btnContainer\">\r\n            <button\r\n              className=\"btn active\"\r\n              type=\"submit\"\r\n              onClick={this.gridView}\r\n            >\r\n              <i class=\"fas fa-th-large\"></i> Grid\r\n            </button>\r\n            <button className=\"btn\" type=\"submit\" onClick={this.listView}>\r\n              <i className=\"fas fa-bars\"></i> List\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Query;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Axios from \"axios\";\nimport Query from \"./Query\";\nimport { trackPromise } from \"react-promise-tracker\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showInitialMessage: false,\n      latlong: \"\",\n      venues: [],\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      showInitialMessage: true,\n    });\n    this.getLocation();\n  }\n\n  getLocation = () => {\n    navigator.geolocation.getCurrentPosition((response) => {\n      this.setState({\n        latlong: response.coords.latitude + \",\" + response.coords.longitude,\n      });\n      console.log(this.state.latlong.length);\n    });\n  };\n\n  getVenues = (query) => {\n    const endPoint = \"https://api.foursquare.com/v2/venues/explore?\";\n    const params = {\n      client_id: \"CS1DCR3PAJITL25EF3FJHAZB5LE1OD5PADOGFYUF5IQM0XO0\",\n      client_secret: \"VRLSN051WJVNKM1K1RR0T5RKZQO52MFLLRCXPLMFLKHYTLU5\",\n      ll: this.state.latlong,\n      query: query,\n      v: \"20200522\",\n      limit: \"9\",\n      sortByDistance: \"1\",\n    };\n    trackPromise(\n      Axios.get(endPoint + new URLSearchParams(params)).then((response) => {\n        this.setState({\n          showInitialMessage: false,\n          venues: response.data.response.groups[0].items,\n        });\n      })\n    );\n  };\n\n  render() {\n    const text = this.state.showInitialMessage ? (\n      <h2 className=\"beforeResultsText\">You can find results here...</h2>\n    ) : (\n      this.getVenues\n    );\n\n    const locationCheck =\n      this.state.latlong.length > 0 ? (\n        <h2>\n          Location: <i class=\"far fa-check-circle\"></i>\n        </h2>\n      ) : (\n        <h2>\n          Location: <i class=\"far fa-times-circle\"></i>\n        </h2>\n      );\n    return (\n      <div>\n        <Query getVenues={this.getVenues} />\n        <h2 className=\"checkLocation\">{locationCheck}</h2>\n        <h1>{text}</h1>\n        <ul className=\"list\">\n          {this.state.venues.map((venue) => {\n            return (\n              <div className=\"card\">\n                <li className=\"card--title\" key={venue.venue.name}>\n                  {venue.venue.name}\n                </li>\n                <hr></hr>\n                <li>\n                  Address{\" \"}\n                  <span className=\"card-adress\">\n                    {venue.venue.location.address}{\" \"}\n                  </span>\n                </li>\n                <li>\n                  Distance{\" \"}\n                  <span className=\"card-distance\">\n                    {venue.venue.location.distance} meter\n                  </span>\n                </li>\n              </div>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { usePromiseTracker } from \"react-promise-tracker\";\nimport Loader from \"react-loader-spinner\";\n\nconst LoadingIndicator = (props) => {\n  const { promiseInProgress } = usePromiseTracker();\n  return (\n    promiseInProgress && (\n      <div className=\"threeDots\">\n        <Loader type=\"ThreeDots\" color=\"rgba(0, 0, 0, 0.85)\" />\n      </div>\n    )\n  );\n};\n\nReactDOM.render(\n  <div>\n    <h1 className=\"title\">Find Your Service Place</h1>\n    <App />\n    <LoadingIndicator />\n  </div>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}